library(vegan)
library(ggplot2)
#library(betapart)
library(ape)
library(dplyr)
#library(plotly)
library(gplots)
library(ggpubr)
library(DESeq2)

ecu<- read.csv(file='2019.10.02_ecuador_bacteria.edge_tally.csv', header=T, row.names=1, stringsAsFactors = F, check.names=F)
ecu[is.na(ecu)]<-0
ecu<- as.matrix(ecu)

#meta
ecu_meta<-read.csv(file="all_groupinfo.csv", header= T, row.names=1,  stringsAsFactors = F)
ecu<-ecu[match(rownames(ecu_meta),rownames(ecu)),] #match metasample with edge data ad removed samples that are not present 
#
gp_info <-ecu_meta

#We will convert our table to DESeqDataSet object
countData = round(as(ecu, "matrix"), digits = 0)
# We will add 1 to the countData otherwise DESeq will fail with the error:
# estimating size factors

countData<-(t(countData+1)) 

dds <- DESeqDataSetFromMatrix(countData, gp_info, as.formula(~ Mangrove)) # here the factor we are using is disturbance based on ammonia levels: low, intermediate, high here labeled mangrove
#Reference:https://github.com/MadsAlbertsen/ampvis/blob/master/R/amp_test_species.R

#Differential expression analysis based on the Negative Binomial (a.k.a. Gamma-Poisson) distribution
#Some reason this doesn't work: data_deseq_test = DESeq(dds, test="wald", fitType="parametric")
data_deseq_test = DESeq(dds)

## Extract the results
res = results(data_deseq_test, cooksCutoff = FALSE)
res_tax = cbind(as.data.frame(res), as.matrix(countData[rownames(res), ]), OTU = rownames(res))

sig =0.0001  # 
fold = 0
plot.point.size = 2
label=T
tax.display = NULL
tax.aggregate = "OTU"

res_tax_sig = subset(res_tax, padj < sig & fold < abs(log2FoldChange))

res_tax_sig <- res_tax_sig[order(res_tax_sig$padj),]
## Plot the data
### MA plot
res_tax$Significant <- ifelse(rownames(res_tax) %in% rownames(res_tax_sig) , "Yes", "No")
res_tax$Significant[is.na(res_tax$Significant)] <- "No"
#pdf('bacteriaMA.pdf', height=5, width=5)
p1 <- ggplot(data = res_tax, aes(x = baseMean, y = log2FoldChange, color = Significant)) +
  geom_point(size = plot.point.size) +
  scale_x_log10() +
  scale_color_manual(values=c("black", "red")) +
  labs(x = "Mean abundance", y = "Log2 fold change")+theme_bw()

#dev.off()

if(label == T){
  if (!is.null(tax.display)){
    rlab <- data.frame(res_tax, Display = apply(res_tax[,c(tax.display, tax.aggregate)], 1, paste, collapse="; "))
  } else {
    rlab <- data.frame(res_tax, Display = res_tax[,tax.aggregate])
  }
  p1 <- p1 + geom_text(data = subset(rlab, Significant == "Yes"), aes(label = Display), size = 4, vjust = 1)
}

p1

test<-as.data.frame(res_tax$Significant)
data.frame(table(test$`res_tax$Significant`))
#################################################

res_tax_sig_abund = cbind(as.data.frame(countData[rownames(res_tax_sig), ]), OTU = rownames(res_tax_sig), padj = res_tax[rownames(res_tax_sig),"padj"]) 
################################looking at most abundnat differential expressed###########################
#order the significant and plot the most abundant 
#write.csv(res_tax_sig_abund, file='test.csv')

# Here I want to order the most abundant taxa 
tt<-read.csv(file='test.csv', header=T, row.names = 1, stringsAsFactors = F)
testorder<-as.matrix(tt)
testorder<-t(testorder)
testorder<-testorder[,order(colSums(testorder), decreasing=TRUE)]
top50<-testorder[,order(colSums(testorder), decreasing=TRUE)[1:60]]
heatmap(top50)
pheatmap(top50)

########################################################################################################

#Apply normalisation (either use relative or log-relative transformation)
#data<-abund_table/rowSums(abund_table)
data<-log((ecu+1)/(rowSums(ecu)+dim(ecu)[2]))
data<-as.data.frame(data)
groups<-as.factor(gp_info[,1])

#Now we plot taxa significantly different between the categories
df<-NULL
for(i in res_tax[rownames(res_tax_sig),"OTU"]){
  tmp<-data.frame(data[,i],groups,rep(paste(i," padj = ",round(res_tax[i,"padj"],5),sep=""),dim(data)[1]))
  if(is.null(df)){df<-tmp} else { df<-rbind(df,tmp)} 
}
colnames(df)<-c("Value","Type","Taxa")

#write teh df
#write.csv(df,file="rest_tag_abundant_withvaluesbacteria.csv")
df1<-read.csv('deseq_bacteria_toplot.csv',header=T)
#

##plot
#pdf('deseqbacteria.pdf', width=10, height=5)
p<-ggplot(df1,aes(Type,Value,colour=Type))+ylab("Log-relative normalised")
p<-p+geom_boxplot()+geom_jitter()+theme_bw()+
  facet_wrap( ~ Taxa1 , scales="free")
p<-p+theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
p
#dev.off()

#############################heatmap
res_tax_sig_abund<-data.matrix(res_tax_sig_abund)
rex_tax_sig_abund_o<-t(res_tax_sig_abund)
top60<-rex_tax_sig_abund_o[,order(colSums(rex_tax_sig_abund_o), decreasing=TRUE)[1:60]]
top60<-t(top50)
##########################################################################################################################################
#write.csv(top50,file='bacteria-deseq-top60.csv')###############################################################################################
##########################################################################################################################################
write.csv(res_tax,file='res_tax.csv')

#delete last two columns with id and pdaj 
top60<-top60[,-c(155,156)]

my_sample_col <- gp_info #delete last colum

#This is the one row 
my_sample_col_2<-read.csv(file="all2.csv", header= T, row.names=1,  stringsAsFactors = F)



#reading taxa 
taxa <- read.csv('taxa.txt', header = T, row.names = 1, sep = '\t', as.is = T)
#taxa aggregated tables 
top60<-read.csv(file='bacteriatop60_spaces.csv', row.names=1, header=T, check.names=F)
#row.names(top50)<-rownames(taxa) Not the same lenght 
#prepocessing data 
#log top 60
toplog<-log((top60+1)/(rowSums(top50)+dim(top50)[2])) # plotting top log makes things look very weird 



cal_z_score <- function(x){
  (x - min(x)) / (max(x)-min(x))
}

# using the scaling colors
library(pheatmap)
data_subset_norm <- t(apply(top60, 1, cal_z_score))
pheatmap(data_subset_norm)


#Italized names 
newnames <- lapply(
  rownames(data_subset_norm),
  function(x) bquote(italic(.(x))))

#Calulating site dist
siteDist <- vegdist(data_subset_norm, "bray", diag = TRUE)
siteDistcol<-vegdist(t(data_subset_norm), 'bray', diag=TRUE)
#clustering_distance_rows = siteDist

##doing data.matrix work!!
#pdf('heatmapbacteria.pdf', height=10, width=6)
library(RColorBrewer)
heat.col <- colorRampPalette(brewer.pal(9, "Blues"))(100)
my_heatmap<-pheatmap(data.matrix(data_subset_norm),annotation_col=my_sample_col_2, labels_row = as.expression(newnames), 
                     show_colnames =F, col=heat.col, clustering_distance_rows = siteDist, clustering_distance_cols = siteDistcol)
#,
                     #cutree_rows = 2,
                     #cutree_cols = 2)
#
save_pheatmap_png <- function(x, filename, width=1400, height=1600, res = 160) {
  png(filename, width = width, height = height, res = res)
  grid::grid.newpage()
  grid::grid.draw(x$gtable)
  dev.off()
}

save_pheatmap_png(my_heatmap, "bacteriaheatmapV3.png")

save_pheatmap_pdf <- function(x, filename, width=10, height=10) {
  stopifnot(!missing(x))
  stopifnot(!missing(filename))
  pdf(filename, width=width, height=height)
  grid::grid.newpage()
  grid::grid.draw(x$gtable)
  dev.off()
}
save_pheatmap_pdf(my_heatmap, "V3bacter_heatmap.pdf")
